<style>
#myDiv {
  width: 50%;
  height: 300px;
  float: left;
  margin-top: 5%;
}
</style>
<body class="nav-md">
  <script>
  if (jQuery("body").width() < 760) {
    $('body').addClass('nav-sm');
    $('body').removeClass('nav-md')
  }
  </script>

  <script src="https://code.jquery.com/jquery-3.0.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>

  <script>
      $(function(){
        function randomRGBA() {
          var o = Math.round, r = Math.random, s = 255;
          return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';
        }
        function getData(array, search, value) {
          var data = array.find(function(element) {
            return element[search] == value;
          });
          return data;
        }
        var activeTasks = 0;
        var completedTasks = 0;
        var plannedTasks = 0;
        var backlogTasks = 0;
        var totalTasks = 0;
        var user = {
          hasRoles: [],
          hasNoRoles: 0
        };
        var totalUsers = 0;
        var people = {
          assigned: [],
          unassigned: 0
        };
        
        var chartProgressTasks = document.getElementById("progressTasks").getContext("2d");
        var chartTasksAC = document.getElementById("tasksAC").getContext("2d");
        var chartTasksAssigne = document.getElementById("tasksAssigne").getContext("2d");
        var chartTasksAssigne2 = document.getElementById("taskAssigne2").getContext("2d");
        var chartTasksPB = document.getElementById("tasksPB").getContext("2d");
        var chartUserRoles = document.getElementById("userRoles").getContext("2d");
        var chartNumberProjects = document.getElementById("numberProjects").getContext("2d");
        var chartRemainingTasks = document.getElementById("remainingTasks").getContext("2d");
        var chartUpcomingTasks = document.getElementById("upcomingTasks").getContext("2d");

        $.getJSON("data/json/users.json", function(result){
          var res = result;
          totalUsers = res.length - 1;

          res.forEach(value => {
            if (value.roles) {
              if (user.hasRoles.indexOf(value.roles) === -1) {
                if (typeof(user.hasRoles[value.roles]) === "undefined") {
                  user.hasRoles[value.roles] = 1;
                } else {
                  user.hasRoles[value.roles] += 1;
                }
                
              }
            } else {
              user.hasNoRoles += 1;
            }
          });

          var labels = ["Total Users", "Has No Roles"];
          var data = [totalUsers, user.hasNoRoles];
          var colors = [randomRGBA(), randomRGBA()];

          for(var name in user['hasRoles']) {
            labels.push(name);
            data.push(user['hasRoles'][name]);
            colors.push(randomRGBA());
          }

          var userRoles = new Chart(chartUserRoles, {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [{
                label: "Users",
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ],
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });
        });

        $.getJSON("data/json/tasks.json", function(result){
          var res = result;
          var folder = {};
          var project = [];
          var countProject = [];
          var upcomingTasks = [];
          var defaultMonth = [0,0,0,0,0,0,0,0,0,0,0,0];
          var year = new Date().getFullYear();
          totalTasks = res.length - 1;

          $.getJSON("data/json/folders.json", function(result){
            localStorage.setItem('folder', JSON.stringify(result));
          });

          folder = JSON.parse(localStorage.getItem('folder'));

          folder.forEach(value => {
            if(value.isProject === "True") {
              project.push(value);
            }
          });

          var numberProjects = new Chart(chartNumberProjects, {
            type: 'horizontalBar',
            data: {
              labels: ["Number of Projects"],
              datasets: [{
                label: "Projects",
                data: [project.length],
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ],
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          res.forEach(value => {
            var startDate = value.dates__start;
            if (value.status === "Active") {
              var data = getData(folder, "_id__$oid", value.parentFolderIds__$oid);
              if (data) {
                if (data['isProject'] == "False") {
                  var data2 = getData(folder, "_id__$oid", data.parentId);
                  if (data2) {
                    if (data2['isProject'] == "False") {
                      var data3 = getData(folder, "_id__$oid", data2.parentId);
                      if (data3) {
                        if (data3['isProject'] == "True") {
                          if(countProject.indexOf(data3['title']) === -1) {
                            if (typeof(countProject[data3['title']]) === "undefined") {
                              countProject[data3['title']] = 1;
                            } else {
                              countProject[data3['title']] += 1;
                            }
                            
                            if (startDate) {
                              startDate = startDate.split("/");
                              var month = startDate[1] - 1;
                              if(startDate[2] == year) {
                                if (typeof(upcomingTasks[data3['title']]) === "undefined") {
                                  upcomingTasks[data3['title']] = defaultMonth;
                                  upcomingTasks[data3['title']][month] = 1;
                                } else {
                                  upcomingTasks[data3['title']][month] += 1;
                                }
                              }
                            }
                          }
                        } else {
                          var data4 = getData(folder, "_id__$oid", data3.parentId);
                          if (data4) {
                            if (data4['isProject'] == "True") {
                              if(countProject.indexOf(data4['title']) === -1) {
                                if (typeof(countProject[data4['title']]) === "undefined") {
                                  countProject[data4['title']] = 1;
                                } else {
                                  countProject[data4['title']] += 1;
                                }
                              }

                              if (startDate) {
                                startDate = startDate.split("/");
                                var month = startDate[1] - 1;
                                if(startDate[2] == year) {
                                  if (typeof(upcomingTasks[data4['title']]) === "undefined") {
                                    upcomingTasks[data4['title']] = defaultMonth;
                                    upcomingTasks[data4['title']][month] = 1;
                                  } else {
                                    upcomingTasks[data4['title']][month] += 1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            
            if (value.authorIds__name) {
              if (people.assigned.indexOf(value.authorIds__name) === -1) {
                if (typeof(people.assigned[value.authorIds__name]) === "undefined") {
                  people.assigned[value.authorIds__name] = 1;
                } else {
                  people.assigned[value.authorIds__name] += 1;
                }
                
              }
            } else {
              people.unassigned += 1;
            }

            if (value.status === "Active") {
              activeTasks += 1;
            } else if (value.status === "Completed") {
              completedTasks += 1;
            }

            if (value.dates__type === "Planned") {
              plannedTasks += 1;
            } else if (value.dates__type === "backlog") {
              backlogTasks += 1;
            }
          });

          var datasets = [];

          for(var name in countProject) {
            datasets.push({
              label: name,
              data: upcomingTasks[name],
              backgroundColor: "#03586A",
            });
          }

          var upcomingTasks = new Chart(chartUpcomingTasks, {
            type: 'bar',
            data: {
              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
              datasets: datasets
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          var labels = [];
          var data = [];
          var colors = [];

          for(var name in countProject) {
            labels.push(name);
            data.push(countProject[name]);
            colors.push(randomRGBA());
          }

          var remainingTasks = new Chart(chartRemainingTasks, {
            type: 'horizontalBar',
            data: {
              labels: labels,
              datasets: [{
                label: "Tasks",
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ],
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          var labels = ["Total Tasks", "Unassigned"];
          var data = [totalTasks, people.unassigned];
          var colors = ["rgba(0,0,255,0.5)","rgba(255,0,0,0.5)"];

          for(var name in people['assigned']) {
            labels.push(name);
            data.push(people['assigned'][name]);
            colors.push(randomRGBA());
          }

          var tasksAssigne = new Chart(chartTasksAssigne, {
            type: 'horizontalBar',
            data: {
              labels: labels,
              datasets: [{
                label: "Tasks",
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ],
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          people.unassigned = ((people.unassigned/totalTasks) * 100).toFixed(2);

          labels = ["Unassigned"];
          data = [people.unassigned];
          var colors2 = ["rgba(255,0,0,0.5)"];

          for(var name in people['assigned']) {
            var count = ((people['assigned'][name]/totalTasks) * 100).toFixed(2);
            labels.push(name);
            data.push(count);
            colors2.push(randomRGBA());
          }

          var taskAssigne2 = new Chart(chartTasksAssigne2, {
            type: 'pie',
            data: {
              labels: labels,
              datasets: [{
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ],
              }]
            },
            options: {
              maintainAspectRatio: false
            }
          });

          labels = ["Total Tasks", "Planned Tasks", "Backlog Tasks"];
          data = [totalTasks, plannedTasks, backlogTasks];

          var tasksPB = new Chart(chartTasksPB, {
            type: 'horizontalBar',
            data: {
              labels: labels,
              datasets: [{
                label: "Number of Tasks",
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ]
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          labels = ["Total Tasks", "Active Tasks", "Completed Tasks"];
          data = [totalTasks, activeTasks, completedTasks];

          var tasksAC = new Chart(chartTasksAC, {
            type: 'horizontalBar',
            data: {
              labels: labels,
              datasets: [{
                label: "Number of Tasks",
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ]
              }]
            },
            options: {
              maintainAspectRatio: false,
              scales: {
                yAxes: [{
                  ticks: {
                    beginAtZero: true
                  }
                }]
              }
            }
          });

          activeTasks = ((activeTasks/totalTasks) * 100).toFixed(2);
          completedTasks = ((completedTasks/totalTasks) * 100).toFixed(2);

          labels = ["Active Tasks", "Completed Tasks"];
          data = [activeTasks, completedTasks];

          var progressTasks = new Chart(chartProgressTasks, {
            type: 'pie',
            data: {
              labels: labels,
              datasets: [{
                data: data,
                backgroundColor: [
                  "#03586A", "#26B99A", "#acadac", "#03586A", "#26B99A", "#acadac"
                ]
              }]
            },
            options: {
              maintainAspectRatio: false
            }
          });
        });
      });
    </script>
  
		
		
		
		
		
<body class="nav-md">

  <script>
  if (jQuery("body").width() < 760) {
    $('body').addClass('nav-sm');
    $('body').removeClass('nav-md')
  }
  </script>

  <!-- Container -->
  <div class="container body">
    <!-- Main Container -->
    <div class="main_container_db">

      <!-- Sidebar -->
      {{> sidebar }}
      <!-- /Sidebar -->

      <!-- page content -->
      <div class="right_col_db page_content" role="main">

       <!-- top navigation ! -->
       {{> topbar }}
       <!-- /top navigation -->


       <!-- main cont -->
       <div class="main_cont">
         <nav aria-label="breadcrumb" role="navigation">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Charts</li>
                </ol>
            </nav>
       

        <section class="login_content">

          <div class="row">
            <div class="task-visuals col-md-12 col-sm-12 col-xs-12">
              <div class="x_panel">
                <div class="x_title">
                  <h2>Tasks</h2>
                  <div class="clearfix"></div>
                </div>
                <div class="x_content">
                  <div class="row">
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Number of Projects</h4>
                      <div>
                        <canvas id="numberProjects"></canvas>
                      </div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Remaining Tasks</h4>
                      <div>
                        <canvas id="remainingTasks"></canvas>
                      </div>
                    </div>
                    <div class="upcoming col-md-12 col-sm-12 col-xs-12">
                      <h4>Upcoming tasks (2018)</h4>
                      <div>
                        <canvas id="upcomingTasks"></canvas>
                      </div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Number Of Tasks (Active or Completed)</h4>
                      <div><canvas id="tasksAC"></canvas></div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Number Of Tasks (Planned or Backlog)</h4>
                      <div><canvas id="tasksPB"></canvas></div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Progress Of Tasks (%)</h4>
                      <div><canvas id="progressTasks"></canvas></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="task-visuals col-md-12 col-sm-12 col-xs-12">
              <div class="x_panel">
                <div class="x_title">
                  <h2>Users</h2>
                  <div class="clearfix"></div>
                </div>
                <div class="x_content">
                  <div class="row">
                    <div class="col-md-8 col-sm-8 col-xs-8">
                      <h4>User Roles</h4>
                      <div><canvas id="userRoles"></canvas></div>
                    </div>
                    <div class="col-md-4 col-sm-4 col-xs-4">
                      <h4>Tasks Assigned (%)</h4>
                      <div><canvas id="taskAssigne2"></canvas></div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                      <h4>Tasks Assigned</h4>
                      <div><canvas id="tasksAssigne"></canvas></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div>
            <img src="../build/images/logo_elevate.png" style="border: 0; width: 296px;">
          </div>
        </section>




                    </div>
                  </div>
                </div>
              </div>
            
            

            </div>
          </div>

          <!-- footer content -->
          <footer>
            <div class="pull-right">
              &copy; elyvt.com
            </div>
            <div class="clearfix"></div>
          </footer>
          <!-- /footer content -->
        </div>
        <!-- /main cont -->
      </div>
      <!-- /page content -->
    </div>
    <!-- /Main Container -->
  </div>
  <!-- /Container --> 


  <!-- jQuery -->
  http://elyvt.com
  <!-- Bootstrap -->
  <script src="/vendors/bootstrap/dist/js/bootstrap.min.js"></script>

  <!-- bootstrap-daterangepicker -->
  <script src="/vendors/moment/min/moment.min.js"></script>
  <script src="/vendors/bootstrap-daterangepicker/daterangepicker.js"></script>

  <!-- Custom Theme Scripts -->
  <script src="/build/js/custom.min.js"></script>

  <script src="/vendors/plotly/js/plotly-latest.min.js"></script>
  <script src="/vendors/plotly/js/numeric.min.js"></script>

  <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>

  <script type="text/javascript" src="js/snap.svg-min.js"></script>
  <script src="/js/frappe-gantt.min.js" ></script>

  <script>
  // initalise variables
  

/*
  var tasksGanttChartContents = []

  var tasksgantdata = {{{tasksGanttChartContents}}}

  for (var element in tasksgantdata){
    var task = {
       id: tasksgantdata[element]['id'],
      name: tasksgantdata[element]['name'],
      start: tasksgantdata[element]['start'],
      end: tasksgantdata[element]['end'],
      progress: 100
    } 
    if(tasksgantdata[element]['dependencies']){
      task.dependencies = tasksgantdata[element]['dependencies']
    }
    tasksGanttChartContents.push(task);
  }


  
   * Function getContactByID
   *
   * Find and Return Contact from contactList by ID
   *
   * @param (type): $contactID(integer)
   * @return Contact Details: (Json Obj)
   
   function getContactByID($contactID){
    for(var contactsElement in contactsData['data']){
      if($contactID==contactsData['data'][contactsElement]['id']){
        return contactsData['data'][contactsElement];
      }
    }
    return false;
  }



var gantt = new Gantt("#gantt", tasksGanttChartContents);
gantt.change_view_mode('Week')

*/

  $(window).load(function(){
    $('#completedTaskstable').DataTable();
    $("#overdueTaskstable").DataTable();
    $("#upcomingTaskstable").DataTable();
  });

  </script>

  <style>
    .task-visuals .col-md-8 > div, .task-visuals .col-lg-8 > div, .task-visuals .col-sm-8 > div,
    .task-visuals .col-md-4 > div, .task-visuals .col-lg-4 > div, .task-visuals .col-sm-4 > div,
    .ppp .col-md-8, .ppp .col-lg-8, .ppp .col-sm-8 {
      height: 250px;
      margin-bottom: 40px;
    }

    .upcoming > div {
      height: 250px;
      margin-bottom: 40px;
    }

    .ppp .col-md-8, .ppp .col-lg-8, .ppp .col-sm-8 {
      width: 200px;
      margin-bottom: 40px;
    }

    .task-visuals .col-md-6 > div, .task-visuals .col-lg-6 > div, .task-visuals .col-sm-6 > div {
      height: 150px;
      margin-bottom: 40px;
    }

    .square {
      vertical-align: middle;
      display: inline-block;
      background: blue;
      width: 15px;
      height: 15px;
      margin-right: 1px;
    }
 </style>

</body>
</html>

		
		
